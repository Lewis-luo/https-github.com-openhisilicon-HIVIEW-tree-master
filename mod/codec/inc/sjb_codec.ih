#pragma pack(push, 4)

STRUCT(gsf_venc_t)
{
  FIELD(int, en);
  FIELD(int, type);
  FIELD(int, width);
  FIELD(int, height);
  FIELD(int, fps);
  FIELD(int, gop);
  FIELD(int, flow);
  FIELD(int, bitrate);
  FIELD(int, profile);
  FIELD(int, qp);
  FIELD(int, lowdelay);
};

STRUCT(gsf_aenc_t)
{
  FIELD(int, en);
  FIELD(int, type);
  FIELD(int, sprate);
  FIELD(int, vol);
};

STRUCT(gsf_osd_t)
{
  FIELD(int, en);
  FIELD(int, type);
  FIELD(int, fontsize);
  ARRAY(int, point, 2);
  ARRAY(int, wh, 2);
  STRING(text, 4096);
};

STRUCT(gsf_vmask_t)
{
  FIELD(int, en);
  ARRAY(int, rect, 4);
  FIELD(int, color);
};

STRUCT(gsf_vi_t)
{
  FIELD(int, wdr);
  FIELD(int, fps);
  FIELD(int, res);
  FIELD(int, avs);
};

STRUCT(gsf_vo_t)
{
  FIELD(int, intf);  // -1: NONE, 0: HDMI,  1: MIPI
  FIELD(int, sync);  // 0: 1080P, 1: 4K
};


STRUCT(gsf_lenscfg_t)
{
  FIELD(int, lens); // lens-type 0: fixed lens, 1: ldm lens;
  STRING(uart, 32); // uart-name "ttyAMA2" or "ttyAMA4";
  FIELD(int, ircut);// 0: manual, 1: auto, 2: cds;
};



STRUCT(gsf_codec_ipc_t)
{
  //1
  FIELD(gsf_vi_t,    vi);
  FIELD(gsf_vo_t,    vo);
  FIELD(gsf_aenc_t,  aenc);
  FIELD(gsf_lenscfg_t, lenscfg);
  
  //2
  ARRAY(gsf_venc_t,  venc,  GSF_CODEC_VENC_NUM);
  ARRAY(gsf_osd_t,   osd,   GSF_CODEC_OSD_NUM);
  ARRAY(gsf_vmask_t, vmask, GSF_CODEC_VMASK_NUM); 
  //3
};


STRUCT(gsf_codec_nvr_t)
{
  FIELD(int, resolu);
  ARRAY(gsf_venc_t, venc, GSF_CODEC_VENC_NUM);
};

STRUCT(gsf_lens_t)
{
  FIELD(int, cmd); // GSF_LENS_CMD_E
  FIELD(int, arg1);
  FIELD(int, arg2);
};

STRUCT(gsf_img_csc_t)
{
  FIELD(int, byPass);
  FIELD(int, u8Hue);
  FIELD(int, u8Luma);
  FIELD(int, u8Contr);
  FIELD(int, u8Satu);
};

STRUCT(gsf_img_ae_t)
{
  FIELD(int, byPass);
  FIELD(int, u8Speed);
  FIELD(int, u8Compensation);
  FIELD(int, SysGainRangeMax);
  FIELD(int, SysGainRangeMin);
  FIELD(int, ExpTimeRangeMax);
  FIELD(int, ExpTimeRangeMin);
};


STRUCT(gsf_img_dehaze_t)
{
  FIELD(int, byPass);
  FIELD(int, u8strength);
};

STRUCT(gsf_img_all_t)
{
   FIELD(gsf_img_csc_t, csc);
   FIELD(gsf_img_ae_t, ae);
   FIELD(gsf_img_dehaze_t, dehaze);
};


#pragma pack(pop)
